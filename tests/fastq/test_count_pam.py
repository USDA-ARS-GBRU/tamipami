
# Generated by Qodo Gen
from tamipami.fastq import count_pam


# Dependencies:
# pip install pytest-mock
import pytest

class TestCountPam:

    # Count PAM sequences correctly for 5prime orientation with valid spacer and FASTQ file
    def test_count_pam_5prime_orientation(self, mocker):
        # Mock gzip.open and SeqIO.parse
        mock_handle = mocker.mock_open()
        mocker.patch('gzip.open', mock_handle)
    
        mock_record = mocker.Mock()
        mock_record.seq = 'TTTAAACCCGGG'
        mock_seqio = mocker.patch('Bio.SeqIO.parse')
        mock_seqio.return_value = [mock_record]
    
        result, total, detections = count_pam(
            spacer='AAACCC',
            fastq='test.fastq.gz',
            pamlen=3,
            orientation='5prime'
        )
    
        assert detections == 1
        assert total == 0
        assert result['TTT'] == 1

    # Count PAM sequences correctly for 3prime orientation with valid spacer and FASTQ file
    def test_count_pam_3prime_orientation(self, mocker):
        # Mock gzip.open and SeqIO.parse
        mock_handle = mocker.mock_open()
        mocker.patch('gzip.open', mock_handle)
    
        mock_record = mocker.Mock()
        mock_record.seq = 'AAACCCGGG'
        mock_seqio = mocker.patch('Bio.SeqIO.parse')
        mock_seqio.return_value = [mock_record]
    
        result, total, detections = count_pam(
            spacer='AAACCC',
            fastq='test.fastq.gz',
            pamlen=3,
            orientation='3prime'
        )
    
        assert detections == 1
        assert total == 0
        assert result['GGG'] == 1

    # Handle empty FASTQ file
    def test_count_pam_empty_fastq(self, mocker):
        # Mock empty FASTQ file
        mock_handle = mocker.mock_open()
        mocker.patch('gzip.open', mock_handle)
        mock_seqio = mocker.patch('Bio.SeqIO.parse')
        mock_seqio.return_value = []

        result = count_pam(
            spacer='AAACCC',
            fastq='empty.fastq.gz',
            pamlen=3,
            orientation='5prime'
        )

        if result is not None:
            result_dict, total, detections = result
            assert detections == 0
            assert total == 0
            assert all(count == 0 for count in result_dict.values())
        else:
            assert result is None

    # Handle FASTQ file with no matching spacer sequences
    def test_count_pam_no_matches(self, mocker):
        # Mock FASTQ with non-matching sequences
        mock_handle = mocker.mock_open()
        mocker.patch('gzip.open', mock_handle)
    
        mock_record = mocker.Mock()
        mock_record.seq = 'TTTGGGCCC'
        mock_seqio = mocker.patch('Bio.SeqIO.parse')
        mock_seqio.return_value = [mock_record]
    
        result, total, detections = count_pam(
            spacer='AAACCC',
            fastq='test.fastq.gz',
            pamlen=3,
            orientation='5prime'
        )
    
        assert detections == 0
        assert total == 0
        assert all(count == 0 for count in result.values())