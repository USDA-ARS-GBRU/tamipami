
# Generated by Qodo Gen
from tamipami.fastq import iterate_kmer


import pytest

class TestIterateKmer:

    # Generate dictionary with all possible k-mers of length 1 (4 combinations)
    def test_kmer_length_one(self):
        result = iterate_kmer(1)
        assert len(result) == 4
        assert list(result.keys()) == ['A', 'C', 'G', 'T']
        assert all(v == 0 for v in result.values())

    # Generate dictionary with all possible k-mers of length 3 (64 combinations)
    def test_kmer_length_three(self):
        result = iterate_kmer(3)
        assert len(result) == 64
        assert list(result.keys())[0] == 'AAA'
        assert list(result.keys())[-1] == 'TTT'
        assert all(v == 0 for v in result.values())

    # Pass k=0 and verify ValueError is raised
    def test_zero_length_kmer_raises_error(self):
        with pytest.raises(ValueError) as exc_info:
            iterate_kmer(0)
        assert str(exc_info.value) == "`k` must be a positive integer."

    # Pass k=-1 and verify ValueError is raised
    def test_negative_length_kmer_raises_error(self):
        with pytest.raises(ValueError) as exc_info:
            iterate_kmer(-1)
        assert str(exc_info.value) == "`k` must be a positive integer."