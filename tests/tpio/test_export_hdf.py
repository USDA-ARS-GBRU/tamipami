
# Generated by Qodo Gen
import pandas as pd
from tamipami.tpio import export_hdf


# Dependencies:
# pip install pytest-mock
import pytest

class TestExportHdf:

    # Successfully export dictionary of DataFrames to HDF5 file with buffer return
    def test_export_hdf_with_buffer_return(self, mocker):
        # Arrange
        test_df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
        test_dict = {6: test_df}
        mock_store = mocker.patch('pandas.HDFStore')
        mock_handle = mocker.MagicMock()
        mock_handle.get_file_image.return_value = b'test_buffer'
        mock_store.return_value.__enter__.return_value._handle = mock_handle

        # Act
        result = export_hdf(test_dict)

        # Assert
        assert result == b'test_buffer'
        mock_store.assert_called_once_with(
            'tamipami.h5',
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=0,
            complevel=6
        )

    # Empty dictionary input
    def test_export_hdf_empty_dict(self, mocker):
        # Arrange
        empty_dict = {}
        mock_store = mocker.patch('pandas.HDFStore')
        mock_handle = mocker.MagicMock()
        mock_handle.get_file_image.return_value = b''
        mock_store.return_value.__enter__.return_value._handle = mock_handle

        # Act
        result = export_hdf(empty_dict)

        # Assert
        assert result == b''
        mock_store.assert_called_once_with(
            'tamipami.h5',
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=0,
            complevel=6
        )

    # Successfully export dictionary of DataFrames to HDF5 file on disk
    def test_export_hdf_to_file(self, mocker):
        # Arrange
        test_df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
        test_dict = {6: test_df}
        mock_store = mocker.patch('pandas.HDFStore')
        mock_handle = mocker.MagicMock()
        mock_store.return_value.__enter__.return_value._handle = mock_handle

        # Act
        export_hdf(test_dict, to_buffer=False)

        # Assert
        mock_store.assert_called_once_with(
            'tamipami.h5',
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=1,
            complevel=6
        )
        mock_handle.get_file_image.assert_not_called()

    # Invalid filename path with default to_buffer=True
    def test_export_hdf_invalid_filename_path(self, mocker):
        # Arrange
        test_df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
        test_dict = {6: test_df}
        invalid_filename = '/invalid/path/tamipami.h5'
        mock_store = mocker.patch('pandas.HDFStore', side_effect=OSError("Invalid file path"))

        # Act & Assert
        with pytest.raises(OSError, match="Invalid file path"):
            export_hdf(test_dict, filename=invalid_filename)
        mock_store.assert_called_once_with(
            invalid_filename,
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=0,
            complevel=6
        )

    # Dictionary with empty DataFrames
    def test_export_hdf_with_empty_dataframes(self, mocker):
        # Arrange
        empty_df = pd.DataFrame()
        test_dict = {6: empty_df}
        mock_store = mocker.patch('pandas.HDFStore')
        mock_handle = mocker.MagicMock()
        mock_handle.get_file_image.return_value = b'empty_buffer'
        mock_store.return_value.__enter__.return_value._handle = mock_handle

        # Act
        result = export_hdf(test_dict)

        # Assert
        assert result == b'empty_buffer'
        mock_store.assert_called_once_with(
            'tamipami.h5',
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=0,
            complevel=6
        )

    # Ensure that HDFStore is called with the correct parameters and handles resources properly
    def test_hdfstore_called_correctly(self, mocker):
        # Arrange
        test_df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
        test_dict = {6: test_df}
        mock_store = mocker.patch('pandas.HDFStore')

        # Act
        export_hdf(test_dict, to_buffer=False)

        # Assert
        mock_store.assert_called_once_with(
            'tamipami.h5',
            mode='a',
            driver='H5FD_CORE',
            driver_core_backing_store=1,
            complevel=6
        )