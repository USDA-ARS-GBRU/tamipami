
# Generated by Qodo Gen
import pandas as pd
from tamipami.tpio import import_hdf


# Dependencies:
# pip install pytest-mock
import pytest

class TestImportHdf:

    # Successfully import HDF file with multiple k-mer lengths from filename
    def test_import_hdf_from_file_success(self, mocker):
        # Mock HDFStore and read_hdf
        mock_store = mocker.MagicMock()
        mock_store.__enter__.return_value.keys.return_value = ['/k_3', '/k_4']
        mocker.patch('pandas.HDFStore', return_value=mock_store)
    
        mock_df = pd.DataFrame({'col1': [1,2], 'col2': [3,4]})
        mocker.patch('pandas.read_hdf', return_value=mock_df)
    
        result = import_hdf(filename='test.h5')
    
        assert len(result) == 2
        assert 3 in result
        assert 4 in result
        assert isinstance(result[3], pd.DataFrame)
        assert isinstance(result[4], pd.DataFrame)

    # Successfully import HDF file from stdin buffer and save to temp file
    def test_import_hdf_from_buffer_success(self, mocker):
        # Mock temp file creation with the correct module path
        mock_temp = mocker.patch('tamipami.tpio.store_stdin_binary_to_tempfile')
        mock_temp.return_value = 'temp.h5'

        # Mock HDFStore and read_hdf
        mock_store = mocker.MagicMock()
        mock_store.__enter__.return_value.keys.return_value = ['/k_5']
        mocker.patch('pandas.HDFStore', return_value=mock_store)

        mock_df = pd.DataFrame({'col1': [1,2]})
        mocker.patch('pandas.read_hdf', return_value=mock_df)

        # Mock os functions
        mock_exists = mocker.patch('os.path.exists', return_value=True)
        mock_remove = mocker.patch('os.remove')

        result = import_hdf(from_buffer=True)

        assert len(result) == 1
        assert 5 in result
        assert isinstance(result[5], pd.DataFrame)

    # Handle empty HDF file with no k-mer keys
    def test_import_hdf_empty_file(self, mocker):
        # Mock HDFStore with empty keys
        mock_store = mocker.MagicMock()
        mock_store.__enter__.return_value.keys.return_value = []
        mocker.patch('pandas.HDFStore', return_value=mock_store)
    
        result = import_hdf(filename='empty.h5')
    
        assert isinstance(result, dict)
        assert len(result) == 0

    # Handle invalid k-mer key format in HDF file
    def test_import_hdf_invalid_key_format(self, mocker):
        # Mock HDFStore with invalid key format
        mock_store = mocker.MagicMock()
        mock_store.__enter__.return_value.keys.return_value = ['/invalid_key']
        mocker.patch('pandas.HDFStore', return_value=mock_store)
    
        # Mock pd.read_hdf to prevent actual file reading
        mocker.patch('pandas.read_hdf', return_value=pd.DataFrame())

        with pytest.raises(ValueError):
            import_hdf(filename='invalid.h5')